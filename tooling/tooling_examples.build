# Add these targets to your top-level meson.build file
# It should be above the build/ submodule

############################
# Supporting Build Targets #
############################

# Doxygen

run_target('docs',
	command: ['doxygen', 'docs/Doxyfile'])

run_target('docs',
	command: ['tools/doxygen.sh', architecture])

# Complexity Analysis

run_target('complexity',
	command: ['build/tooling/complexity/complexity_check.sh', '-w'])

run_target('complexity-list',
	command: ['build/tooling/complexity/complexity_check.sh'])

# Doxygen

run_target('docs',
	command: ['build/tooling/doxygen/doxygen.sh', architecture])

# Vale - Document Linting

vale = find_program('vale', required: false)
if vale.found():
	run_target('doclint',
		command: ['vale',
		'--config',
		meson.source_root() + '/tools/vale-styleguide/config/documentation.vale.ini',
		'--glob',
		'*.md',
		meson.source_root() + '/docs/',
		meson.source_root() + '/README.md']
	)
endif

# Cppcheck

cppcheck = find_program('cppcheck', required: false)
if cppcheck.found()
	run_target('cppcheck',
		command: ['cppcheck',
		# Options
		'--quiet', '--enable=style', '--force',
		# Include Directories
		'-I', meson.current_source_dir() + '/include',
		# Source Directories
		'src', 'test']
	)

	run_target('cppcheck-xml',
		command: ['tools/cppcheck_xml.sh']
	)
endif

# Clang Tidy

clangtidy = find_program('clang-tidy', required: false)

if clangtidy.found()
    run_target(
        'tidy',
        command: [
            'build/tooling/clang-tidy/clang-tidy.sh',
            # Checks
            '-*,cppcoreguidelines-*,modernize-*,performance-*,portability-*,readability-*,' +
            '-readability-inconsistent-declaration-parameter-name,' +
            # Header Filter
            '.*',
            #Finish with files or other arguments - they are added to the end of the command invocation
        ] + libmemory_lint_files)
endif
