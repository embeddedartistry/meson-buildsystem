#!/bin/bash

OUTPUT=$1

BUILD_MACHINE="$(whoami)@$(hostname)"
BUILD_TIMESTAMP=$(date +"%Y-%m-%d %H:%M:%S")
BUILD_OS=$(uname -sr)

# Read the version number from the latest git tag using git describe
# And then split that version string on the '-' character so we can have an array for easier processing
GIT_DESCRIPTION=$(git describe --long --dirty --tags)

VERSION_NUM="${GIT_DESCRIPTION%%-*}"; GIT_DESCRIPTION="${GIT_DESCRIPTION#*-}"
COMMITS_PAST="${GIT_DESCRIPTION%%-*}"; GIT_DESCRIPTION="${GIT_DESCRIPTION#*-}"
COMMIT="${GIT_DESCRIPTION%%-*}"; GIT_DESCRIPTION="${GIT_DESCRIPTION#*-}"
DIRTY="${GIT_DESCRIPTION%%-*}"; GIT_DESCRIPTION="${GIT_DESCRIPTION#*-}"

if [ $DIRTY == "dirty" ]; then
	DIRTY_FLAG="+"
else
	DIRTY_FLAG=""
fi

if [ $COMMITS_PAST == "0" ]; then
	COMMITS_PAST_STR=""
else
	COMMITS_PAST_STR="-$COMMITS_PAST"
fi

FULL_VERSION_STRING="$VERSION_NUM$COMMITS_PAST_STR$DIRTY_FLAG from $BUILD_MACHINE on $BUILD_TIMESTAMP"
SHORT_VERSION_STRING="$VERSION_NUM$COMMITS_PAST_STR$DIRTY_FLAG"

# Output the version number to the build log
echo "Compiling version $FULL_VERSION_STRING" >&2
echo "Short version: $SHORT_VERSION_STRING" >&2

FILE_OUTPUT=$(cat <<!
// This file was auto-generated on $(date)
// Do not edit this file
// Do not check this file into the git repository

const char* version_str()
{
    return "$FULL_VERSION_STRING";
}

const char* version_str_short()
{
	return "$SHORT_VERSION_STRING";
}

const char* build_id()
{
	return "$COMMIT";
}

const char* build_machine()
{
	return "$BUILD_MACHINE";
}

const char* build_timestamp()
{
	return "$BUILD_TIMESTAMP";
}

const char* build_os()
{
	return "$BUILD_OS";
}
!
)

# Create the version.cpp file, or if no output is defined, print to stdout
if [ -z "$OUTPUT" ]; then
	echo "$FILE_OUTPUT"
else
	echo "$FILE_OUTPUT" > $OUTPUT
fi

